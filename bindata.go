// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// data/._.VolumeIcon.icns
// data/._
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _data_VolumeiconIcns = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x62\x60\x15\x63\x67\x60\x62\x60\xf0\x4d\x4c\x56\xf0\x0f\x56\x88\x50\x80\x02\x90\x18\x03\x27\x03\x03\x83\x11\x03\x03\xdf\x06\x06\x06\x10\x9f\xef\x11\x03\x03\xa3\x1c\x4c\x85\x83\x00\x03\x0e\xe0\x18\x12\x12\x64\x3d\xeb\xe4\x7f\x88\x0e\x86\x0a\x5c\xea\x46\xc1\x28\x18\x05\xa3\x60\x14\x8c\x82\x51\x30\x0a\x46\xc1\x28\x18\x05\xa3\x60\x14\x8c\x02\x6a\x02\x46\x28\x06\x03\xb9\x90\x8c\xcc\x62\x85\xa2\xd4\xe2\xfc\xd2\xa2\xe4\x54\x85\xb4\xfc\xa2\x6c\x85\xcc\xbc\x92\xd4\xbc\x92\xcc\xfc\xbc\xc4\x9c\x9c\x4a\x85\x9c\xd4\xb4\x12\x85\xa4\x9c\xc4\xbc\x6c\x50\x3f\x78\x18\x00\x54\xff\xc3\x85\x65\x18\xe4\xfe\xff\x07\x04\x00\x00\xff\xff\xd7\x56\xd4\x56\x00\x10\x00\x00")

func data_VolumeiconIcnsBytes() ([]byte, error) {
	return bindataRead(
		_data_VolumeiconIcns,
		"data/._.VolumeIcon.icns",
	)
}

func data_VolumeiconIcns() (*asset, error) {
	bytes, err := data_VolumeiconIcnsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/._.VolumeIcon.icns", size: 4096, mode: os.FileMode(420), modTime: time.Unix(1608765733, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _data_ = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x62\x60\x15\x63\x67\x60\x62\x60\xf0\x4d\x4c\x56\xf0\x0f\x56\x88\x50\x80\x02\x90\x18\x03\x27\x03\x03\x83\x11\x03\x03\xdf\x06\x06\x06\x10\x9f\xef\x11\x03\x03\xa3\x1c\x03\x14\xb0\x30\xe0\x02\x8e\x21\x21\x41\xd6\xb3\x4e\xfe\x87\xe8\x60\xa8\xc0\xa9\x70\x14\x8c\x82\x51\x30\x0a\x46\xc1\x28\x18\x05\xa3\x60\x14\x8c\x82\x51\x30\x0a\x46\xc1\x28\xa0\x22\x60\x84\x62\x30\x90\x0b\xc9\xc8\x2c\x56\x28\x4a\x2d\xce\x2f\x2d\x4a\x4e\x55\x48\xcb\x2f\xca\x56\xc8\xcc\x2b\x49\xcd\x2b\xc9\xcc\xcf\x4b\xcc\xc9\xa9\x54\xc8\x49\x4d\x2b\x51\x48\xca\x49\xcc\xcb\x06\xf5\x83\x87\x01\x40\xf5\x3f\x5c\x58\x86\x41\xee\xff\x7f\x40\x00\x00\x00\xff\xff\xb1\x7d\x86\xd3\x00\x10\x00\x00")

func data_Bytes() ([]byte, error) {
	return bindataRead(
		_data_,
		"data/._\uf029",
	)
}

func data_() (*asset, error) {
	bytes, err := data_Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/._\uf029", size: 4096, mode: os.FileMode(420), modTime: time.Unix(1608759453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/._.VolumeIcon.icns": data_VolumeiconIcns,
	"data/._\uf029":              data_,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"._.VolumeIcon.icns": &bintree{data_VolumeiconIcns, map[string]*bintree{}},
		"._":              &bintree{data_, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
